---
import { getCollection } from "astro:content";
import getSortedPosts from "../utils/getSortedPosts";

const posts = await getCollection("blog");
const sortedPosts = getSortedPosts(posts);

// 清理 Markdown 语法的函数
function cleanMarkdown(text: string): string {
  if (!text) return '';
  
  return text
    // 移除代码块
    .replace(/```[\s\S]*?```/g, '[代码块]')
    .replace(/`([^`]+)`/g, '$1')
    // 移除链接
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
    // 移除图片
    .replace(/!\[([^\]]*)\]\([^)]+\)/g, '[图片: $1]')
    // 移除标题标记
    .replace(/^#{1,6}\s+/gm, '')
    // 移除粗体和斜体
    .replace(/\*\*([^*]+)\*\*/g, '$1')
    .replace(/\*([^*]+)\*/g, '$1')
    .replace(/__([^_]+)__/g, '$1')
    .replace(/_([^_]+)_/g, '$1')
    // 移除列表标记
    .replace(/^[\s]*[-*+]\s+/gm, '• ')
    .replace(/^\d+\.\s+/gm, '• ')
    // 移除引用标记
    .replace(/^>\s+/gm, '')
    // 移除多余的空行
    .replace(/\n\s*\n/g, '\n')
    // 限制长度
    .substring(0, 150)
    .trim();
}

// 获取文章摘要
function getPostExcerpt(post: any): string {
  if (post.data.description) {
    return cleanMarkdown(post.data.description);
  }
  
  if (post.body) {
    return cleanMarkdown(post.body);
  }
  
  return '暂无描述';
}
---

<div id="search-container">
  <div class="search-box">
    <input 
      type="text" 
      id="search-input" 
      placeholder="搜索文章..." 
      autocomplete="off"
    />
    <button id="clear-search" style="display: none;">清空</button>
  </div>
  
  <div id="search-results">
    <div id="search-info" style="display: none;"></div>
    <div id="results-list"></div>
  </div>
</div>

<style>
  #search-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }
  
  .search-box {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
  }
  
  #search-input {
    flex: 1;
    padding: 12px 16px;
    border: 2px solid #ddd;
    border-radius: 8px;
    font-size: 16px;
    transition: border-color 0.3s ease;
  }
  
  #search-input:focus {
    outline: none;
    border-color: #007bff;
  }
  
  #clear-search {
    padding: 12px 20px;
    background: #6c757d;
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: background 0.3s ease;
  }
  
  #clear-search:hover {
    background: #5a6268;
  }
  
  #search-info {
    margin-bottom: 20px;
    padding: 10px;
    background: #f8f9fa;
    border-radius: 6px;
    color: #495057;
    font-weight: 500;
  }
  
  .search-result {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 20px;
    margin-bottom: 16px;
    transition: box-shadow 0.3s ease;
  }
  
  .search-result:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .result-title {
    margin: 0 0 8px 0;
    font-size: 1.2em;
    font-weight: 600;
  }
  
  .result-title a {
    color: #007bff;
    text-decoration: none;
    transition: color 0.3s ease;
  }
  
  .result-title a:hover {
    color: #0056b3;
  }
  
  .result-meta {
    color: #6c757d;
    font-size: 0.9em;
    margin-bottom: 10px;
  }
  
  .result-description {
    color: #495057;
    line-height: 1.6;
    margin-bottom: 10px;
  }
  
  .result-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
  }
  
  .result-tag {
    background: #e9ecef;
    color: #495057;
    padding: 2px 8px;
    border-radius: 12px;
    font-size: 0.8em;
    text-decoration: none;
    transition: background 0.3s ease;
  }
  
  .result-tag:hover {
    background: #dee2e6;
  }
  
  .no-results {
    text-align: center;
    color: #6c757d;
    font-style: italic;
    padding: 40px 20px;
  }
</style>

<script define:vars={{ posts: sortedPosts, getPostExcerpt }}>
  // 搜索数据
  const searchData = posts.map(post => ({
    slug: post.slug,
    title: post.data.title,
    description: post.data.description || '',
    body: post.body || '',
    tags: post.data.tags || [],
    category: post.data.category || '',
    pubDatetime: post.data.pubDatetime,
    excerpt: post.data.description || post.body?.substring(0, 150) || '暂无描述'
  }));

  // 清理 Markdown 语法
  function cleanMarkdown(text) {
    if (!text) return '';
    
    return text
      .replace(/```[\s\S]*?```/g, '[代码块]')
      .replace(/`([^`]+)`/g, '$1')
      .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1')
      .replace(/!\[([^\]]*)\]\([^)]+\)/g, '[图片: $1]')
      .replace(/^#{1,6}\s+/gm, '')
      .replace(/\*\*([^*]+)\*\*/g, '$1')
      .replace(/\*([^*]+)\*/g, '$1')
      .replace(/__([^_]+)__/g, '$1')
      .replace(/_([^_]+)_/g, '$1')
      .replace(/^[\s]*[-*+]\s+/gm, '• ')
      .replace(/^\d+\.\s+/gm, '• ')
      .replace(/^>\s+/gm, '')
      .replace(/\n\s*\n/g, '\n')
      .substring(0, 150)
      .trim();
  }

  // 搜索函数
  function performSearch(query) {
    if (!query.trim()) {
      return [];
    }

    const searchTerm = query.toLowerCase();
    
    return searchData.filter(post => {
      const titleMatch = post.title.toLowerCase().includes(searchTerm);
      const descriptionMatch = post.description.toLowerCase().includes(searchTerm);
      const bodyMatch = post.body.toLowerCase().includes(searchTerm);
      const tagsMatch = post.tags.some(tag => tag.toLowerCase().includes(searchTerm));
      const categoryMatch = post.category.toLowerCase().includes(searchTerm);
      
      return titleMatch || descriptionMatch || bodyMatch || tagsMatch || categoryMatch;
    });
  }

  // 渲染搜索结果
  function renderResults(results, query) {
    const resultsContainer = document.getElementById('results-list');
    const searchInfo = document.getElementById('search-info');
    
    if (results.length === 0) {
      searchInfo.style.display = 'block';
      searchInfo.textContent = query ? `没有找到关于 "${query}" 的结果` : '';
      resultsContainer.innerHTML = query ? '<div class="no-results">没有找到匹配的文章</div>' : '';
      return;
    }
    
    searchInfo.style.display = 'block';
    searchInfo.textContent = `找到 ${results.length} 个结果 关于 "${query}"`;
    
    resultsContainer.innerHTML = results.map(post => {
      const cleanDescription = cleanMarkdown(post.excerpt);
      const date = new Date(post.pubDatetime).toLocaleDateString('zh-CN');
      
      return `
        <div class="search-result">
          <h3 class="result-title">
            <a href="/posts/${post.slug}">${post.title}</a>
          </h3>
          <div class="result-meta">发布于 ${date}</div>
          <div class="result-description">${cleanDescription}</div>
          ${post.tags.length > 0 ? `
            <div class="result-tags">
              ${post.tags.map(tag => `<a href="/tags/${tag}" class="result-tag">${tag}</a>`).join('')}
            </div>
          ` : ''}
        </div>
      `;
    }).join('');
  }

  // 初始化搜索功能
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('search-input');
    const clearButton = document.getElementById('clear-search');
    
    // 从 URL 获取初始搜索词
    const urlParams = new URLSearchParams(window.location.search);
    const initialQuery = urlParams.get('q') || '';
    
    if (initialQuery) {
      searchInput.value = initialQuery;
      const results = performSearch(initialQuery);
      renderResults(results, initialQuery);
      clearButton.style.display = 'block';
    }
    
    // 实时搜索
    searchInput.addEventListener('input', function() {
      const query = this.value;
      
      if (query.length > 0) {
        clearButton.style.display = 'block';
        const results = performSearch(query);
        renderResults(results, query);
        
        // 更新 URL
        const newUrl = new URL(window.location);
        newUrl.searchParams.set('q', query);
        window.history.replaceState({}, '', newUrl);
      } else {
        clearButton.style.display = 'none';
        renderResults([], '');
        
        // 清除 URL 参数
        const newUrl = new URL(window.location);
        newUrl.searchParams.delete('q');
        window.history.replaceState({}, '', newUrl);
      }
    });
    
    // 清空搜索
    clearButton.addEventListener('click', function() {
      searchInput.value = '';
      clearButton.style.display = 'none';
      renderResults([], '');
      
      // 清除 URL 参数
      const newUrl = new URL(window.location);
      newUrl.searchParams.delete('q');
      window.history.replaceState({}, '', newUrl);
      
      searchInput.focus();
    });
  });
</script>